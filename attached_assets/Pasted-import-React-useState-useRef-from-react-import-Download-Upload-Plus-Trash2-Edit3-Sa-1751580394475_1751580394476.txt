import React, { useState, useRef } from 'react';
import { Download, Upload, Plus, Trash2, Edit3, Save, X, Printer } from 'lucide-react';

const EvaluationSystem = () => {
  const [currentTemplate, setCurrentTemplate] = useState({
    title: "제공기관 선정 심의회 평가표",
    totalScore: 100,
    sections: [
      {
        id: 'A',
        title: '기관수행능력',
        totalPoints: 35,
        items: [
          { id: 1, text: '통계SOS 사업 운영 체계화 2단 완료', type: '정성', points: 20, score: 0 },
          { id: 2, text: '심의 및 승인 목적 확인', type: '정량', points: 5, score: 0 },
          { id: 3, text: '기관 운영 기간', type: '정성', points: 5, score: 0 },
          { id: 4, text: '조직구성', type: '정량', points: 5, score: 0 }
        ]
      },
      {
        id: 'B',
        title: '인력운영',
        totalPoints: 20,
        items: [
          { id: 1, text: '사업 운영 총괄자 및 담당자의 전문성', type: '정성', points: 5, score: 0 },
          { id: 2, text: '통계SOS 사업 운영 체계화부 담당자', type: '정량', points: 5, score: 0 },
          { id: 3, text: 'SOS서비스 수행 인력의 확보', type: '정량', points: 10, score: 0 }
        ]
      },
      {
        id: 'C',
        title: '인건비관리',
        totalPoints: 10,
        items: [
          { id: 1, text: '세부사업별 프로그램 (이용자후기시)', type: '정량', points: 5, score: 0 },
          { id: 2, text: '주요 사고 예방 대책 관리 및 이용자 재이용관리', type: '정량', points: 5, score: 0 }
        ]
      },
      {
        id: 'D',
        title: '공모참여',
        totalPoints: 15,
        items: [
          { id: 1, text: '사업(총괄) 명가 결과', type: '정량', points: 15, score: 0 }
        ]
      },
      {
        id: 'E',
        title: '실적평가',
        totalPoints: 20,
        items: [
          { id: 1, text: '서비스 제공 건수(학업 기간)', type: '정량', points: 15, score: 0 },
          { id: 2, text: '세금기업 명가결과 결과 (통계배너시)', type: '정량', points: 5, score: 0 }
        ]
      }
    ]
  });

  const [isEditing, setIsEditing] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const fileInputRef = useRef(null);

  const calculateSectionScore = (section) => {
    return section.items.reduce((sum, item) => sum + (item.score || 0), 0);
  };

  const calculateTotalScore = () => {
    return currentTemplate.sections.reduce((sum, section) => sum + calculateSectionScore(section), 0);
  };

  const updateScore = (sectionId, itemId, score) => {
    setCurrentTemplate(prev => ({
      ...prev,
      sections: prev.sections.map(section =>
        section.id === sectionId
          ? {
              ...section,
              items: section.items.map(item =>
                item.id === itemId ? { ...item, score: Math.min(score, item.points) } : item
              )
            }
          : section
      )
    }));
  };

  const addSection = () => {
    const newId = String.fromCharCode(65 + currentTemplate.sections.length);
    setCurrentTemplate(prev => ({
      ...prev,
      sections: [...prev.sections, {
        id: newId,
        title: '새 평가영역',
        totalPoints: 10,
        items: [{ id: 1, text: '새 평가항목', type: '정량', points: 10, score: 0 }]
      }]
    }));
  };

  const deleteSection = (sectionId) => {
    setCurrentTemplate(prev => ({
      ...prev,
      sections: prev.sections.filter(section => section.id !== sectionId)
    }));
  };

  const addItem = (sectionId) => {
    setCurrentTemplate(prev => ({
      ...prev,
      sections: prev.sections.map(section =>
        section.id === sectionId
          ? {
              ...section,
              items: [...section.items, {
                id: Math.max(...section.items.map(i => i.id)) + 1,
                text: '새 평가항목',
                type: '정량',
                points: 5,
                score: 0
              }]
            }
          : section
      )
    }));
  };

  const deleteItem = (sectionId, itemId) => {
    setCurrentTemplate(prev => ({
      ...prev,
      sections: prev.sections.map(section =>
        section.id === sectionId
          ? {
              ...section,
              items: section.items.filter(item => item.id !== itemId)
            }
          : section
      )
    }));
  };

  const updateItem = (sectionId, itemId, field, value) => {
    setCurrentTemplate(prev => ({
      ...prev,
      sections: prev.sections.map(section =>
        section.id === sectionId
          ? {
              ...section,
              items: section.items.map(item =>
                item.id === itemId ? { ...item, [field]: value } : item
              )
            }
          : section
      )
    }));
  };

  const updateSection = (sectionId, field, value) => {
    setCurrentTemplate(prev => ({
      ...prev,
      sections: prev.sections.map(section =>
        section.id === sectionId ? { ...section, [field]: value } : section
      )
    }));
  };

  const saveTemplate = () => {
    const dataStr = JSON.stringify(currentTemplate, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    const exportFileDefaultName = '평가표_템플릿.json';
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  const loadTemplate = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const template = JSON.parse(e.target.result);
          setCurrentTemplate(template);
        } catch (error) {
          alert('파일 형식이 올바르지 않습니다.');
        }
      };
      reader.readAsText(file);
    }
  };

  const printResults = () => {
    window.print();
  };

  const resetScores = () => {
    setCurrentTemplate(prev => ({
      ...prev,
      sections: prev.sections.map(section => ({
        ...section,
        items: section.items.map(item => ({ ...item, score: 0 }))
      }))
    }));
  };

  return (
    <div className="max-w-6xl mx-auto p-6 bg-gray-50 min-h-screen">
      <div className="bg-white rounded-lg shadow-lg p-8">
        {/* 헤더 */}
        <div className="flex justify-between items-center mb-8 print:mb-4">
          <div className="flex-1">
            <input
              type="text"
              value={currentTemplate.title}
              onChange={(e) => setCurrentTemplate(prev => ({ ...prev, title: e.target.value }))}
              className="text-2xl font-bold text-gray-800 bg-transparent border-b-2 border-transparent hover:border-blue-300 focus:border-blue-500 focus:outline-none transition-colors"
              disabled={!isEditing}
            />
          </div>
          
          <div className="flex gap-2 print:hidden">
            <button
              onClick={() => setIsEditing(!isEditing)}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                isEditing 
                  ? 'bg-green-600 text-white hover:bg-green-700' 
                  : 'bg-blue-600 text-white hover:bg-blue-700'
              }`}
            >
              {isEditing ? <Save size={18} /> : <Edit3 size={18} />}
            </button>
            
            <button
              onClick={saveTemplate}
              className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
              title="템플릿 저장"
            >
              <Download size={18} />
            </button>
            
            <button
              onClick={() => fileInputRef.current?.click()}
              className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
              title="템플릿 불러오기"
            >
              <Upload size={18} />
            </button>
            
            <button
              onClick={printResults}
              className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
              title="인쇄"
            >
              <Printer size={18} />
            </button>
            
            <button
              onClick={resetScores}
              className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              title="점수 초기화"
            >
              <X size={18} />
            </button>
          </div>
        </div>

        <input
          type="file"
          ref={fileInputRef}
          onChange={loadTemplate}
          accept=".json"
          className="hidden"
        />

        {/* 평가표 */}
        <div className="overflow-x-auto">
          <table className="w-full border-collapse border border-gray-400 text-sm">
            <thead>
              <tr className="bg-gray-100">
                <th className="border border-gray-400 px-4 py-3 text-left font-bold">구분 (100점)</th>
                <th className="border border-gray-400 px-4 py-3 text-left font-bold">세부 항목</th>
                <th className="border border-gray-400 px-2 py-3 text-center font-bold w-16">유형</th>
                <th className="border border-gray-400 px-2 py-3 text-center font-bold w-16">배점</th>
                <th className="border border-gray-400 px-2 py-3 text-center font-bold w-20">평가점수</th>
                {isEditing && <th className="border border-gray-400 px-2 py-3 text-center font-bold w-20 print:hidden">관리</th>}
              </tr>
            </thead>
            <tbody>
              {currentTemplate.sections.map((section, sectionIndex) => (
                <React.Fragment key={section.id}>
                  {section.items.map((item, itemIndex) => (
                    <tr key={`${section.id}-${item.id}`} className="hover:bg-gray-50">
                      {itemIndex === 0 && (
                        <td 
                          className="border border-gray-400 px-4 py-3 font-medium bg-blue-50 align-top"
                          rowSpan={section.items.length}
                        >
                          <div className="flex items-center justify-between">
                            <div>
                              {isEditing ? (
                                <input
                                  type="text"
                                  value={section.title}
                                  onChange={(e) => updateSection(section.id, 'title', e.target.value)}
                                  className="font-bold text-sm bg-transparent border-b border-gray-300 focus:border-blue-500 focus:outline-none"
                                />
                              ) : (
                                <span className="font-bold text-sm">{section.id}. {section.title}</span>
                              )}
                              <div className="text-xs text-gray-600 mt-1">
                                ({calculateSectionScore(section)}점)
                              </div>
                            </div>
                            {isEditing && (
                              <div className="flex flex-col gap-1 print:hidden">
                                <button
                                  onClick={() => addItem(section.id)}
                                  className="text-blue-600 hover:text-blue-800 text-xs"
                                  title="항목 추가"
                                >
                                  <Plus size={14} />
                                </button>
                                <button
                                  onClick={() => deleteSection(section.id)}
                                  className="text-red-600 hover:text-red-800 text-xs"
                                  title="섹션 삭제"
                                >
                                  <Trash2 size={14} />
                                </button>
                              </div>
                            )}
                          </div>
                        </td>
                      )}
                      
                      <td className="border border-gray-400 px-4 py-3">
                        {isEditing ? (
                          <input
                            type="text"
                            value={item.text}
                            onChange={(e) => updateItem(section.id, item.id, 'text', e.target.value)}
                            className="w-full bg-transparent border-b border-gray-300 focus:border-blue-500 focus:outline-none text-sm"
                          />
                        ) : (
                          <span className="text-sm">{item.id}. {item.text}</span>
                        )}
                      </td>
                      
                      <td className="border border-gray-400 px-2 py-3 text-center">
                        {isEditing ? (
                          <select
                            value={item.type}
                            onChange={(e) => updateItem(section.id, item.id, 'type', e.target.value)}
                            className="w-full text-xs bg-transparent border border-gray-300 rounded focus:border-blue-500 focus:outline-none"
                          >
                            <option value="정량">정량</option>
                            <option value="정성">정성</option>
                          </select>
                        ) : (
                          <span className="text-xs px-2 py-1 bg-blue-100 text-blue-800 rounded">
                            {item.type}
                          </span>
                        )}
                      </td>
                      
                      <td className="border border-gray-400 px-2 py-3 text-center">
                        {isEditing ? (
                          <input
                            type="number"
                            value={item.points}
                            onChange={(e) => updateItem(section.id, item.id, 'points', parseInt(e.target.value) || 0)}
                            className="w-full text-center text-sm bg-transparent border border-gray-300 rounded focus:border-blue-500 focus:outline-none"
                            min="0"
                          />
                        ) : (
                          <span className="text-sm font-medium">{item.points}점</span>
                        )}
                      </td>
                      
                      <td className="border border-gray-400 px-2 py-3 text-center">
                        <input
                          type="number"
                          value={item.score}
                          onChange={(e) => updateScore(section.id, item.id, parseInt(e.target.value) || 0)}
                          className="w-full text-center text-sm border border-gray-300 rounded focus:border-blue-500 focus:outline-none"
                          min="0"
                          max={item.points}
                        />
                      </td>
                      
                      {isEditing && (
                        <td className="border border-gray-400 px-2 py-3 text-center print:hidden">
                          <button
                            onClick={() => deleteItem(section.id, item.id)}
                            className="text-red-600 hover:text-red-800"
                            title="항목 삭제"
                          >
                            <Trash2 size={14} />
                          </button>
                        </td>
                      )}
                    </tr>
                  ))}
                </React.Fragment>
              ))}
              
              {/* 합계 행 */}
              <tr className="bg-blue-50 font-bold">
                <td className="border border-gray-400 px-4 py-3 text-center">총점</td>
                <td className="border border-gray-400 px-4 py-3"></td>
                <td className="border border-gray-400 px-2 py-3"></td>
                <td className="border border-gray-400 px-2 py-3 text-center">
                  {currentTemplate.sections.reduce((sum, section) => sum + section.items.reduce((itemSum, item) => itemSum + item.points, 0), 0)}점
                </td>
                <td className="border border-gray-400 px-2 py-3 text-center text-lg">
                  {calculateTotalScore()}점
                </td>
                {isEditing && <td className="border border-gray-400 px-2 py-3 print:hidden"></td>}
              </tr>
            </tbody>
          </table>
        </div>

        {/* 섹션 추가 버튼 */}
        {isEditing && (
          <div className="mt-6 print:hidden">
            <button
              onClick={addSection}
              className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium flex items-center gap-2"
            >
              <Plus size={18} />
              새 평가영역 추가
            </button>
          </div>
        )}

        {/* 결과 요약 */}
        <div className="mt-8 p-6 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg">
          <h3 className="text-lg font-bold mb-4 text-gray-800">평가 결과 요약</h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="bg-white p-4 rounded-lg text-center">
              <div className="text-2xl font-bold text-blue-600">
                {calculateTotalScore()}점
              </div>
              <div className="text-sm text-gray-600">총점</div>
            </div>
            <div className="bg-white p-4 rounded-lg text-center">
              <div className="text-2xl font-bold text-green-600">
                {Math.round((calculateTotalScore() / currentTemplate.sections.reduce((sum, section) => sum + section.items.reduce((itemSum, item) => itemSum + item.points, 0), 0)) * 100)}%
              </div>
              <div className="text-sm text-gray-600">달성률</div>
            </div>
            <div className="bg-white p-4 rounded-lg text-center">
              <div className="text-2xl font-bold text-purple-600">
                {currentTemplate.sections.length}개
              </div>
              <div className="text-sm text-gray-600">평가영역</div>
            </div>
            <div className="bg-white p-4 rounded-lg text-center">
              <div className="text-2xl font-bold text-orange-600">
                {currentTemplate.sections.reduce((sum, section) => sum + section.items.length, 0)}개
              </div>
              <div className="text-sm text-gray-600">평가항목</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EvaluationSystem;